package msisdn

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/andybalholm/brotli"
	"io/ioutil"
	"sync"
)

// 以手机的省市区辨别是美国还是加拿大
// North American Numbering Plan area codes
// https://nationalnanpa.com/nanp1/npa_report.csv

var npaMappedBody = []byte{139, 176, 9, 64, 44, 14, 236, 88, 13, 120, 2, 53, 237, 210, 105, 153, 211, 209, 184, 123, 119, 218, 184, 109, 105, 10, 69, 53, 58, 88, 133, 231, 139, 165, 47, 68, 220, 96, 108, 94, 165, 193, 13, 134, 169, 47, 36, 84, 124, 60, 152, 203, 94, 236, 52, 253, 221, 157, 249, 15, 154, 209, 80, 152, 238, 116, 165, 31, 163, 134, 130, 130, 7, 32, 12, 200, 166, 146, 120, 220, 19, 43, 206, 21, 246, 95, 255, 233, 130, 245, 125, 76, 151, 40, 134, 175, 240, 210, 249, 50, 88, 28, 241, 243, 133, 68, 193, 104, 12, 22, 71, 252, 132, 80, 48, 154, 156, 87, 130, 133, 131, 199, 64, 23, 246, 192, 39, 29, 202, 175, 213, 39, 243, 180, 230, 65, 223, 44, 50, 104, 78, 20, 140, 33, 23, 145, 100, 75, 149, 12, 95, 190, 89, 198, 93, 222, 243, 105, 85, 72, 182, 118, 173, 14, 195, 22, 22, 86, 199, 124, 126, 61, 183, 137, 196, 85, 4, 120, 29, 140, 38, 39, 150, 0, 0, 0, 0, 0, 0, 175, 31, 4, 10, 141, 33, 118, 82, 8, 36, 140, 193, 18, 63, 37, 4, 89, 91, 59, 212, 231, 241, 163, 161, 109, 14, 36, 138, 116, 187, 91, 100, 75, 168, 96, 74, 31, 44, 139, 35, 31, 147, 101, 91, 231, 203, 184, 218, 21, 222, 41, 188, 193, 85, 194, 104, 150, 73, 17, 17, 17, 241, 129, 107, 138, 141, 193, 149, 143, 111, 168, 7, 70, 179, 29, 68, 53, 134, 146, 98, 53, 101, 171, 243, 88, 183, 231, 226, 239, 154, 148, 204, 151, 66, 99, 137, 187, 89, 157, 249, 74, 148, 106, 177, 229, 74, 226, 91, 133, 100, 212, 213, 91, 250, 160, 182, 158, 126, 155, 8, 175, 139, 68, 116, 104, 193, 104, 114, 122, 44, 137, 136, 232, 65, 171, 221, 198, 208, 10, 139, 35, 255, 32, 8, 6, 22, 110, 115, 104, 61, 48, 219, 126, 240, 155, 132, 32, 175, 154, 131, 151, 191, 37, 144, 40, 24, 75, 94, 168, 90, 3, 137, 130, 209, 108, 91, 51, 181, 69, 94, 194, 104, 202, 184, 86, 117, 55, 159, 248, 18, 188, 69, 162, 40, 174, 214, 24, 44, 229, 136, 159, 47, 36, 89, 157, 189, 125, 251, 241, 235, 207, 63, 8, 18, 170, 97, 176, 56, 226, 39, 133, 192, 176, 62, 140, 89, 175, 16, 104, 12, 101, 15, 142, 63, 71, 176, 154, 3, 131, 101, 220, 181, 103, 62, 45, 66, 32, 25, 126, 150, 101, 137, 87, 105, 148, 238, 82, 79, 223, 100, 97, 89, 246, 149, 205, 143, 251, 187, 229, 34, 36, 10, 102, 244, 21, 94, 38, 44, 142, 252, 106, 175, 246, 169, 130, 209, 24, 44, 142, 248, 9, 193, 104, 12, 150, 184, 73, 33, 144, 48, 177, 83, 34, 243, 157, 169, 104, 111, 174, 18, 246, 203, 30, 119, 158, 33, 106, 73, 21, 140, 102, 236, 213, 50, 159, 86, 33, 144, 40, 24, 77, 222, 240, 250, 183, 41, 63, 23, 72, 134, 175, 47, 178, 177, 121, 220, 222, 149, 139, 144, 40, 24, 141, 97, 236, 21, 94, 206, 241, 103, 187, 189, 218, 39, 10, 70, 99, 176, 56, 214, 109, 87, 112, 87, 208, 26, 202, 185, 205, 134, 106, 12, 36, 26, 71, 252, 148, 80, 104, 44, 142, 109, 10, 214, 205, 49, 60, 187, 121, 180, 56, 226, 103, 132, 64, 162, 96, 52, 185, 30, 185, 115, 140, 35, 127, 30, 151, 170, 116, 98, 205, 214, 202, 143, 185, 246, 220, 216, 126, 239, 105, 247, 239, 176, 21, 138, 197, 176, 85, 98, 176, 148, 51, 126, 115, 216, 66, 193, 104, 12, 22, 71, 252, 198, 176, 133, 35, 30, 53, 25, 48, 26, 131, 197, 17, 79, 162, 40, 90, 43, 21, 117, 211, 226, 136, 231, 224, 100, 243, 240, 171, 102, 3, 137, 66, 227, 136, 55, 205, 21, 140, 198, 112, 61, 159, 27}

var npaMapping map[string]string
var onceNap sync.Once

func getNpaMapped() map[string]string {
	onceNap.Do(func() {
		rd := brotli.NewReader(bytes.NewBuffer(npaMappedBody))
		rb, _ := ioutil.ReadAll(rd)

		if err := json.Unmarshal(rb, &npaMapping); err != nil {
			panic(err.Error())
		}

		npaMappedBody = nil
	})

	return npaMapping
}

// CC+NDC的结构 比如1809 即为CC:1 NDC:809
func validateNdcCode(ndc string) (string, error) {
	countryCode, ok := getNpaMapped()[ndc]
	if ok {
		return countryCode, nil
	}

	return "", fmt.Errorf("not find in nanpa code map")
}

//func genData() {
//	f, _ := os.Open("./npa_data.txt")
//	sc := bufio.NewScanner(f)
//
//	npaCodeMap := make(map[string]string)
//
//	for sc.Scan() {
//		text := sc.Text()
//
//		splitText := strings.Split(text, " ")
//
//		if len(splitText) != 2 {
//			continue
//		}
//
//		npaCodeMap[splitText[0]] = splitText[1]
//	}
//
//	b, _ := json.Marshal(npaCodeMap)
//	buf := bytes.NewBuffer(make([]byte, 0))
//	w := brotli.NewWriterLevel(buf, brotli.BestCompression)
//	w.Write(b)
//	w.Flush()
//
//	fmt.Println(buf.Bytes())
//}
